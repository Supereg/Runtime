name: Tests

on:
  pull_request:
  push:
    branches:
      - master
      - feature/github-ci
      - experimental/core-dumps

jobs:
  linux:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        image:
#          - swift:5.1-xenial
#          - swift:5.1-bionic
#          - swift:5.2-xenial
#          - swift:5.2-bionic
#          - swift:5.2-focal
#          - swift:5.2-centos8
#          - swift:5.2-amazonlinux2
#          - swift:5.3-xenial
#          - swift:5.3-bionic
#          - swift:5.3-focal
#          - swift:5.3-centos8
#          - swift:5.3-amazonlinux2
          - swift:5.4-xenial
#          - swift:5.4-bionic
#          - swift:5.4-focal
#          - swift:5.4-centos8
#          - swift:5.4-amazonlinux2
#          - swiftlang/swift:nightly-5.4-xenial
#          - swiftlang/swift:nightly-5.4-bionic
#          - swiftlang/swift:nightly-5.4-focal
#          - swiftlang/swift:nightly-5.4-centos8
#          - swiftlang/swift:nightly-5.4-amazonlinux2
#          - swiftlang/swift:nightly-5.5-xenial
#          - swiftlang/swift:nightly-5.5-bionic
#          - swiftlang/swift:nightly-5.5-focal
#          - swiftlang/swift:nightly-5.5-centos8
#          - swiftlang/swift:nightly-5.5-amazonlinux2
#          - swiftlang/swift:nightly-xenial
#          - swiftlang/swift:nightly-bionic
#          - swiftlang/swift:nightly-focal
#          - swiftlang/swift:nightly-centos8
 #         - swiftlang/swift:nightly-amazonlinux2
        configuration:
          - debug
          - release

    container: ${{ matrix.image }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install sudo
        run: apt-get update && apt-get install -y --no-install-recommends sudo

      - name: test enabling cores
        run: |
          ulimit -c               # should output 0 if disabled
          ulimit -c unlimited
          ulimit -c               # should output 'unlimited' now

      - name: test access to core dump directory
        run: |
          sudo touch /cores/test
          ls /cores
          sudo rm /cores/test

      - name: Run tests (debug)
        if: matrix.configuration == 'debug'
        run: |
          ulimit -c unlimited
          sudo swift test

      # running tests in release configuration to ensure everything works as expected with compiler optimizations
      - name: Run tests (release)
        if: matrix.configuration == 'release'
        run: |
          ulimit -c unlimited
          sudo swift test -c release -Xswiftc -enable-testing -Xswiftc -DDEBUG

      - name: Sanitize image name # replacing ':' with '-' for actions/upload-artifact
        if: always()
        env:
          input_image: ${{ matrix.image }}
        run: |
          sanitized="${input_image/:/-}"
          echo $sanitized
          echo "::set-env name=sanitized_image::$sanitized"

      - name: Check Core dump Pattern
        if: failure()
        run: cat /proc/sys/kernel/core_pattern

      - name: Check Core dump Pattern
        if: failure()
        run: sudo cat /proc/sys/kernel/core_pattern
      - name: List core dumps
        if: failure()
        run: ls -al /usr/share/apport/apport/

      - name: List core dumps
        if: failure()
        run: ls -al /cores

      # the 'ulimit -c unlimited' call enables the capturing of core dumps
      - uses: actions/upload-artifact@v2
        if: failure() && matrix.configuration == 'debug'
        with:
          name: core-dump-${{ env.sanitized_image }}-${{ matrix.configuration }}
          # TODO "release directory for release builds"
          path: |
            /usr/share/apport/apport/*
            .build/debug/RuntimePackageTests.xctest

      - uses: actions/upload-artifact@v2
        if: failure() && matrix.configuration == 'release'
        with:
          name: core-dump-${{ env.sanitized_image }}-${{ matrix.configuration }}
          # TODO "release directory for release builds"
          path: |
            /usr/share/apport/apport/*
            .build/release/RuntimePackageTests.xctest
  macos:

    runs-on: macos-latest

    strategy:
      matrix:
        configuration:
          - debug
          - release

    # TODO release configuration
    steps:
      - name: Select latest available Xcode
        uses: maxim-lobanov/setup-xcode@v1.2.1
        with: { 'xcode-version': 'latest' }

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Run tests (debug)
        if: matrix.configuration == 'debug'
        run: |
          ulimit -c unlimited
          swift test

      - name: Run tests (debug)
        if: matrix.configuration == 'debug'
        run: |
          ulimit -c unlimited
          swift test -c release -Xswiftc -enable-testing -Xswiftc -DDEBUG

      # the 'ulimit -c unlimited' call enables the capturing of core dumps
      - uses: actions/upload-artifact@v2
        if: failure() && matrix.configuration == 'debug'
        with:
          name: core-dump-macos-${{ matrix.configuration }}
          path: |
            core
            .build/debug/RuntimePackageTests.xctest

      - uses: actions/upload-artifact@v2
        if: failure() && matrix.configuration == 'release'
        with:
          name: core-dump-macos-${{ matrix.configuration }}
          path: |
            /cores
            .build/release/RuntimePackageTests.xctest
